% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cram_positionlog.R
\name{cram_positionlog}
\alias{cram_positionlog}
\title{Creates a data frame containing engine analysis of a single chess position}
\usage{
cram_positionlog(
  positionlog,
  all_tags = FALSE,
  custom_tags = NULL,
  delete_blank_lines = TRUE
)
}
\arguments{
\item{positionlog}{A character vector of engine analysis}

\item{all_tags}{(Default = FALSE) A boolean. Setting \code{all_tags} = TRUE will
search for all of the info tags listed in the UCI protocol}

\item{custom_tags}{(Default = NULL) An optional character vector of custom
tag names for tags not in the UCI protocol}

\item{delete_blank_lines}{(Default = TRUE) A boolean. Setting this value to
FALSE will leave blank rows/columns intact}
}
\value{
A data frame summarizing the data for the position
}
\description{
The \code{cram_positionlog()} function takes a character vector of engine
analysis for a single chess position and condenses it into a data frame for
easier access.
}
\details{
The \code{cram_positionlog()} function parses output from a
\href{https://github.com/fsmosca/UCIChessEngineProtocol}{UCI}-compatible chess
engine.

According to the UCI protocol, when the engine has stopped
searching, it will send the best move, and optionally, which move it will
ponder if told. The \code{bestmove} line takes the format:

\verb{bestmove <move1> [ponder <move2>]}, where:
\itemize{
\item \verb{<move1>} is the best move found by the engine, in long algebraic notation
\item \verb{<move2>} is the move the engine expects the opponent may play in response.
}

At other times, the engine may send data indicating the engine's
evaluation of the position (and associated principal variation, or pv for
short), the current depth of search, the number of nodes searched, and so
on. For example:

\verb{info depth [a] seldepth [b] score [cp/mate] [c] pv [d]}, where:
\itemize{
\item \verb{[a]} is the depth of the search
\item \verb{[b]} is the selective depth of the search
\item \verb{[cp/mate]} indicates if the score is in centipawns or moves until mate
\item \verb{[c]} is the score of the position
\item \verb{[d]} is the principal variation
}

For a list of data that can appear, refer to the
\href{https://github.com/fsmosca/UCIChessEngineProtocol}{UCI} protocol. Not all
types of data may be present in every info line. Some engines may also
provide information that is not covered by the UCI protocol.

By default, the only data extracted are \code{depth}, \code{multipv}, \code{score},
and \code{pv}. Setting the \code{all_tags} parameter to \code{TRUE} will extract all of
the info tags listed in the UCI protocol. In cases where the engine
supplies data not covered by the UCI protocol, the user may add custom tag
names as a character vector via the \code{custom_tags} parameter, but \emph{only} if
the engine's custom tags conform to one of the following formats:

\if{html}{\out{<tag name>}} \if{html}{\out{<tag value>}}
\if{html}{\out{<tag name>}} <move 1> <move 2> ... \if{html}{\out{<move i>}}

where \if{html}{\out{<tag name>}}, \if{html}{\out{<tag value>}}, and \if{html}{\out{<move i>}} must not contain spaces. Tag
names, tag values and moves must of course be separated from each other by
spaces. Additionally, moves must be in the UCI format. Each \if{html}{\out{<move i>}} should
consist of two chessboard squares followed by an optional promotion piece,
e.g. e2e4 or e7e8q.

If any of the requested data does not appear in the search, NA will
appear in the data frame in the place of missing values. If entire rows or
columns are missing values, they will be deleted by default. To leave
missing rows/columns in place, set the \code{delete_blank_lines} parameter to
FALSE.
}
\examples{
positionlog <- c(
  "info depth 1 seldepth 1 multipv 1 score cp 13 nodes 20 nps 20000 tbhits 0 time 1 pv e2e4",
  "info depth 2 seldepth 2 multipv 1 score cp 14 nodes 40 nps 40000 tbhits 0 time 1 pv e2e4 e7e5",
  "bestmove e2e4 ponder e7e5"
)
cram_positionlog(positionlog)
}
\seealso{
The 'cram' functions condense analysis logs into data frames.
\itemize{
\item \code{\link[=cram_gamelog]{cram_gamelog()}} for condensing analysis of one game.
\item \code{\link[=cram_pgnlog]{cram_pgnlog()}} for condensing analysis of an entire pgn file.
}

The 'parse' functions extract specific data from analysis logs.
\itemize{
\item \code{\link[=parse_gamelog]{parse_gamelog()}} for extracting data from one evaluated game.
\item \code{\link[=parse_pgnlog]{parse_pgnlog()}} for extracting data from games in a pgn.
}

The 'evaluate' functions produce analysis logs.
\itemize{
\item \code{\link[=evaluate_position]{evaluate_position()}} for analyzing chess positions.
\item \code{\link[=evaluate_game]{evaluate_game()}} for analyzing individual games.
\item \code{\link[=evaluate_pgn]{evaluate_pgn()}} for evaluating all the games in a PGN file.
}
}
