% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autoplay_match.R
\name{autoplay_match}
\alias{autoplay_match}
\title{Have a chess engine play a series of games against itself}
\usage{
autoplay_match(
  engine_path,
  position = "",
  limiter,
  limit,
  n_cpus,
  hash_size = NULL,
  mute = TRUE,
  ply_limit = NULL,
  n_games,
  event = NULL,
  site = NULL,
  date = NULL,
  white = NULL,
  black = NULL,
  save_path = NULL
)
}
\arguments{
\item{engine_path}{A single-element character vector of the path to a UCI
compatible chess engine.}

\item{position}{A single-element character vector containing a series of
legal chess moves in long algebraic notation (LAN).}

\item{limiter}{A single-element character vector indicating the desired mode
of search termination. Allowed values are 'depth' (to search a fixed number
of plies), 'nodes' (to search a fixed number of nodes), and 'movetime' (to
search for a fixed number of milliseconds).}

\item{limit}{A single-element integer vector of the desired search depth (#
of plies), search nodes (# of nodes), or search time (# of milliseconds).}

\item{n_cpus}{(Default = 1) A single-element integer vector of the number of
CPUs to use.}

\item{hash_size}{(Default = NULL) A single-element integer vector of the
desired hash size, in MB.}

\item{mute}{(Default = TRUE) A boolean indicating if the board should be
printed after each turn.}

\item{ply_limit}{(Default = NULL) An integer indicating the maximum number of
ply before the game is stopped. Used to limit execution time for unit tests
and examples.}

\item{n_games}{A single-element integer vector of the number of games to be
played.}

\item{event}{(Default = NULL) A single-element character vector of the event
name.}

\item{site}{(Default = NULL) A single-element character vector of the site
name.}

\item{date}{(Default = NULL) A single-element Date vector of the date of the
game.}

\item{white}{(Default = NULL) A single-element character vector of the name
of the player playing white.}

\item{black}{(Default = NULL) A single-element character vector of the name
of the player playing black.}

\item{save_path}{(Default = NULL) A single-element character vector of the
path where the PGN file should be saved.}
}
\value{
A tibble where each row corresponds to a game played by the chess
engine against itself. The columns of the tibble are \code{Event}, \code{Site},
\code{Date}, \code{Round}, \code{White}, \code{Black}, \code{Result}, and \code{Movetext}.
}
\description{
The function \code{autoplay_match()} is used to make a UCI compatible chess engine
play a series of games against itself by repeatedly calling the
\code{autoplay_game()} function. The games are saved in a tibble and optionally as
a PGN file.
}
\examples{
# Replace '/stockfish.exe' with a path to your UCI-compatible engine. To play
# a full game, delete the ply_limit.
autoplay_match('/stockfish.exe', limiter = 'depth', limit = 1, n_cpus = 1L,
mute = FALSE, ply_limit = 3, n_games = 2)
}
