% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autoplay_game.R
\name{autoplay_game}
\alias{autoplay_game}
\title{Have two chess engines play a game against each other}
\usage{
autoplay_game(
  white_engine_path,
  black_engine_path = white_engine_path,
  position = "",
  limiter,
  limit,
  n_cpus,
  hash_size = NULL,
  mute = TRUE,
  ply_limit = NULL
)
}
\arguments{
\item{white_engine_path}{A single-element character vector of the path to the
UCI compatible chess engine for the white player.}

\item{black_engine_path}{(Default = white_engine_path) A single-element
character vector of the path to the UCI compatible chess engine for the
black player.}

\item{position}{A single-element character vector containing a series of
legal chess moves in long algebraic notation (LAN).}

\item{limiter}{A single-element character vector indicating the desired mode
of search termination. Allowed values are 'depth' (to search a fixed number
of plies), 'nodes' (to search a fixed number of nodes), and 'movetime' (to
search for a fixed number of milliseconds).}

\item{limit}{A single-element integer vector of the desired search depth (#
of plies), search nodes (# of nodes), or search time (# of milliseconds).}

\item{n_cpus}{(Default = 1) A single-element integer vector of the number of
CPUs to use.}

\item{hash_size}{(Default = NULL) A single-element integer vector of the
desired hash size, in MB.}

\item{mute}{(Default = TRUE) A boolean indicating if the board should be
printed after each turn.}

\item{ply_limit}{(Default = NULL) An integer indicating the maximum number of
ply before the game is stopped. Used to limit execution time for unit tests
and examples.}
}
\value{
A single-element character vector of the game in standard algebraic
notation (SAN).
}
\description{
The function \code{autoplay_game()} is used to make two UCI compatible chess
engines play a game against each other. If only one engine is provided, it
will play against itself.
}
\details{
Since engines typically do not handle draws by repetition,
insufficient material, or the fifty-move rule, the function checks for
those conditions and declares a draw if any are detected.
}
\examples{
# Replace '/stockfish.exe' with a path to your UCI-compatible engine. To play
# a full game, delete the ply_limit.
autoplay_game('/stockfish.exe', limiter = 'depth', limit = 1, n_cpus = 1L,
mute = FALSE, ply_limit = 3)
}
